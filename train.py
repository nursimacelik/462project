# -*- coding: utf-8 -*-
"""462_step2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OAucFxEYvRdMTA8GlDKme1dy5xKNfICe
"""

import numpy as np
import matplotlib.pyplot as plt
import array as arr
import string
import os
import pickle
from wordcloud import WordCloud
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import svm
from nltk import PorterStemmer
from nltk.stem import WordNetLemmatizer

stemmer = PorterStemmer()
lemmatizer = WordNetLemmatizer()

stop_words = ["i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself",
              "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself",
              "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these",
              "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having", "do",
              "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while",
              "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before",
              "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again",
              "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each",
              "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than",
              "too", "very", "s", "t", "can", "will", "just", "don", "should", "now", "film", "movie", "story", "one",
              "character", "time", "movies", "br", "39", "quot"]
            
stop_words2 = ["br", "quot", "39"]

# preprocesses the given string
# converts to lower case, removes punctuation and stop words
# and returns it back
def clean_data(text):
  lower_case = text.lower()
  wh_special_char = lower_case.translate(str.maketrans(string.punctuation,' '*len(string.punctuation)))
  cleaned_data = ""
  for word in wh_special_char.split():
    if word not in stop_words2:
      cleaned_data += " " + lemmatizer.lemmatize(word)
  return cleaned_data


def print_metrics(prediction):
  count_n = 0
  count_p = 0
  count_z = 0
  label_n = 0
  label_p = 0
  label_z = 0
  tp = 0
  tn = 0
  tz = 0

  for i in range(N):
    if prediction[i] == 'P':
      count_p += 1
      if labels[i] == prediction[i]:
        tp += 1
    elif prediction[i] == 'N':
      count_n += 1
      if labels[i] == prediction[i]:
        tn += 1
    elif prediction[i] == 'Z':
      count_z += 1
      if labels[i] == prediction[i]:
        tz += 1

    if labels[i] == 'P':
      label_p += 1
    elif labels[i] == 'N':
      label_n += 1
    elif labels[i] == 'Z':
      label_z += 1


  accuracy = (tp + tz + tn)*100/N
  print("Train accuracy: " + str(accuracy))
    
  precision_p = tp / count_p
  precision_n = tn / count_n
  precision_z = tz / count_z

  recall_p = tp / label_p
  recall_n = tn / label_n
  recall_z = tz / label_z

  print("Precisions (positive, negative, neutral): ")
  print(precision_p)
  print(precision_n)
  print(precision_z)

  print("Recalls (positive, negative, neutral): ")
  print(recall_p)
  print(recall_n)
  print(recall_z)

  print("Macro average accuracy: ")
  print((recall_p + recall_n + recall_z) / 3)

  print("Macro average precision: ")
  print((precision_p + precision_n + precision_z) / 3)

  print("Macro average recall: ")
  print((recall_p + recall_n + recall_z) / 3)

  print("f score: ")
  print(precision_p*recall_p/(precision_p+recall_p))
  print(precision_n*recall_n/(precision_n+recall_n))
  print(precision_z*recall_z/(precision_z+recall_z))



def get_word_clouds(data_p, data_n, data_z):
  # word cloud images for insight into data
  # negative
  word_cloud = WordCloud().generate(text = data_n)
  plt.imshow(word_cloud, interpolation= "bilinear")
  plt.savefig("negative_wordcloud.png")
  # positive
  word_cloud = WordCloud().generate(text = data_p)
  plt.imshow(word_cloud, interpolation= "bilinear")
  plt.savefig("positive_wordcloud.png")
  # neutral
  word_cloud = WordCloud().generate(text = data_z)
  plt.imshow(word_cloud, interpolation= "bilinear")
  plt.savefig("neutral_wordcloud.png")




data = []
labels=[]
data_z = ""
data_n = ""
data_p = ""
FILE_PATH = "TRAIN/"
c = True
for file in os.listdir(FILE_PATH):
  filename=os.path.join(FILE_PATH,file)
  f = open(filename, "r", encoding="latin-1")
  text = f.read()
  data.append(clean_data(text))
  if c:
    print(filename)
    print(data)
    c = False
  if file[-5] == "N":
    data_n += clean_data(text)
  elif file[-5] == "Z":
    data_z += clean_data(text)
  elif file[-5] == "P":
    data_p += clean_data(text)
  labels.append(file[-5])
  f.close()

N = len(labels)


get_word_clouds(data_p, data_n, data_z)


count = CountVectorizer()
bag = count.fit_transform(data)
#print(count.vocabulary_)
#print(bag.toarray())

clf = MultinomialNB()
clf.fit(bag.toarray(), labels)
prediction = clf.predict(bag.toarray())

print(prediction)

#svmModel = svm.SVC()
#svmModel.fit(bag.toarray(), labels)
#svmPrediction = svmModel.predict(bag.toarray())
#print(svmPrediction)

print_metrics(prediction)
#print("SVM metrics")
#print_metrics(svmPrediction)


pkl_filename = "step2_model_Solis.pkl"
with open(pkl_filename, "wb") as file:
  pickle.dump(clf, file)

countfile = "count.pkl"
with open(countfile, "wb") as file:
  pickle.dump(count, file)

#with open("svm.pkl", "wb") as file:
#  pickle.dump(svmModel, file)



